{"version":3,"sources":["components/Message.js","services/messages.js","services/login.js","App.js","index.js"],"names":["Message","message","style","color","fontStyle","fontSize","listStyleType","margin","padding","backgroundColor","boxShadow","textAlign","username","date","slice","content","token","getAllMessages","axios","get","then","response","data","createMessage","newObject","a","config","headers","Authorization","post","setToken","newToken","login","credentials","App","useState","setErrorMessage","messages","setMessages","newMessage","setNewMessage","setUsername","password","setPassword","user","setUser","socket","io","useEffect","messageService","on","messageObject","result","loggedChatBoxUserJSON","window","localStorage","getItem","JSON","parse","addMessage","event","preventDefault","id","length","Date","now","toString","emit","handleMessageChange","target","value","handleLogin","loginService","setItem","stringify","class","onSubmit","onChange","type","name","map","key","ReactDOM","render","document","getElementById"],"mappings":"mQAiCeA,EA/BC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAqBf,OACA,yBAAKC,MArBgB,CACjBC,MAAO,UACPC,UAAW,SACXC,SAAU,GACVC,cAAe,OACfC,OAAQ,GACRC,QAAS,GACTC,gBAAiB,UACjBC,UAAW,YACXC,UAAW,SAaX,4BAAKV,EAAQW,SAAb,IAAkCX,EAAQY,KAL9BC,MAAM,GAAG,IAOrB,uBAAGZ,MAbW,CACdC,MAAO,YAYeF,EAAQc,Y,gBCvBlCC,EAAQ,KAuBG,GACXC,eAlBmB,WAGnB,OAFgBC,IAAMC,IATV,iBAWGC,MAAK,SAAAC,GAChB,OAAOA,EAASC,SAepBC,cAXe,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACZC,EAAS,CACXC,QAAS,CAAEC,cAAeZ,IAFZ,SAKKE,IAAMW,KArBjB,gBAqB+BL,EAAWE,GALpC,cAKZL,EALY,yBAMXA,EAASC,MANE,2CAAH,sDAYfQ,SAxBa,SAAAC,GACbf,EAAK,iBAAae,KCCP,GAAEC,MALN,uCAAG,WAAOC,GAAP,eAAAR,EAAA,sEACWP,IAAMW,KAHf,aAG6BI,GAD/B,cACNZ,EADM,yBAELA,EAASC,MAFJ,2CAAH,uD,iBCwIIY,EArIH,WAAO,IAAD,EACwBC,mBAAS,MADjC,mBACKC,GADL,aAEgBD,mBAAS,IAFzB,mBAETE,EAFS,KAECC,EAFD,OAGoBH,mBAAS,IAH7B,mBAGTI,EAHS,KAGGC,EAHH,OAIgBL,mBAAS,IAJzB,mBAITvB,EAJS,KAIC6B,EAJD,OAKgBN,mBAAS,IALzB,mBAKTO,EALS,KAKCC,EALD,OAMQR,mBAAS,MANjB,mBAMTS,EANS,KAMHC,EANG,KAOVC,EAASC,MAGfC,qBAAU,WACRC,EAAehC,iBAAiBG,MAAK,SAACC,GACpCiB,EAAYjB,MAGdyB,EAAOI,GAAG,UAAV,uCAAqB,WAAOC,GAAP,eAAA1B,EAAA,sEACEwB,EAAehC,iBADjB,OACbmC,EADa,OAEnBd,EAAYc,GAFO,2CAArB,yDAIC,IAGHJ,qBAAU,WACR,IAAMK,EAAwBC,OAAOC,aAAaC,QAChD,qBAGF,GAAIH,EAAuB,CACzB,IAAMT,EAAOa,KAAKC,MAAML,GACxBR,EAAQD,GACRK,EAAenB,SAASc,EAAK5B,UAE9B,IAIH,IAAM2C,EAAU,uCAAG,WAAOC,GAAP,iBAAAnC,EAAA,6DACjBmC,EAAMC,iBAEAV,EAAgB,CACpBpC,QAASwB,EACTuB,GAAIzB,EAAS0B,OAAS,EACtBlD,KAAM,IAAImD,KAAKA,KAAKC,OAAOC,WAC3BtD,SAAUgC,EAAKhC,UAPA,SAUXqC,EAAe1B,cAAc4B,GAVlB,uBAWMF,EAAehC,iBAXrB,OAWXI,EAXW,OAYjBiB,EAAYjB,GACZmB,EAAc,IAEdM,EAAOqB,KAAK,cAAehB,GAfV,4CAAH,sDAmBViB,EAAsB,SAACR,GAC3BpB,EAAcoB,EAAMS,OAAOC,QAGvBC,EAAW,uCAAG,WAAOX,GAAP,eAAAnC,EAAA,6DAClBmC,EAAMC,iBADY,kBAIGW,EAAaxC,MAAM,CAAEpB,WAAU8B,aAJlC,OAIVE,EAJU,OAMhBU,OAAOC,aAAakB,QAAQ,oBAAqBhB,KAAKiB,UAAU9B,IAChEK,EAAenB,SAASc,EAAK5B,OAC7B6B,EAAQD,GACRH,EAAY,IACZE,EAAY,IAVI,kDAYhBP,EAAgB,qBAZA,0DAAH,sDAwDjB,OACE,yBAAKuC,MAAM,kBACT,yBAAKA,MAAM,aACT,wCAAuB,OAAT/B,GAVhB,0BAAMgC,SAAUjB,GACd,2BAAOW,MAAO/B,EAAYsC,SAAUT,IACpC,4BAAQU,KAAK,UAAb,WAWQ,OAATlC,GA5CD,0BAAMgC,SAAUL,GACd,gEACA,2BACE,yCADF,uCAGA,yCAEE,2BACED,MAAO1D,EACPmE,KAAK,WACLF,SAAU,gBAAGR,EAAH,EAAGA,OAAH,OAAgB5B,EAAY4B,EAAOC,WAGjD,yCAEE,2BACEA,MAAO5B,EACPqC,KAAK,WACLD,KAAK,WACLD,SAAU,gBAAGR,EAAH,EAAGA,OAAH,OAAgB1B,EAAY0B,EAAOC,WAGjD,6BACE,4BAAQQ,KAAK,UAAb,WAsBJ,yBAAKH,MAAM,aACT,4BACGtC,EAAS2C,KAAI,SAAC/E,GAAD,OACZ,kBAAC,EAAD,CAASgF,IAAKhF,EAAQ6D,GAAI7D,QAASA,W,MC5H/CiF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.70d99969.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Message = ({ message }) => {\r\n    const messageStyle = {\r\n        color: '#543257',\r\n        fontStyle: 'italic',\r\n        fontSize: 16,\r\n        listStyleType: 'none',\r\n        margin: 10,\r\n        padding: 10,\r\n        backgroundColor: '#aabb97',\r\n        boxShadow: \"0 4px 4px\",\r\n        textAlign: 'left'\r\n      }\r\n    const textStyle = {\r\n        color: '#e8f1f7'\r\n    }\r\n    \r\n    const parseTime = (time) => {\r\n        \r\n        return time.slice(11,16)\r\n    }\r\n\r\n    return (\r\n    <div style={messageStyle}>\r\n        <li>{message.username} {parseTime(message.date)}\r\n        \r\n        <p style={textStyle}>{message.content}</p></li>\r\n    </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default Message","//Tämä moduuli lähettää REST kyselyt palvelimelle.\r\nimport axios from 'axios'\r\nconst baseUrl = '/api/messages'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\nconst getAllMessages = () => {\r\n    const request = axios.get(baseUrl)\r\n    \r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\nconst createMessage = async newObject => {\r\n    const config = {\r\n        headers: { Authorization: token },\r\n    }\r\n\r\n    const response = await axios.post(baseUrl, newObject, config)\r\n    return response.data\r\n}\r\n\r\nexport default {\r\n    getAllMessages,\r\n    createMessage,\r\n    setToken\r\n}","import axios from \"axios\";\r\nconst baseUrl = \"/api/login\";\r\n\r\nconst login = async (credentials) => {\r\n  const response = await axios.post(baseUrl, credentials);\r\n  return response.data;\r\n};\r\n\r\nexport default { login };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Message from \"./components/Message\";\r\nimport messageService from \"./services/messages\";\r\nimport loginService from \"./services/login\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst App = () => {\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [user, setUser] = useState(null);\r\n  const socket = io();\r\n\r\n  //Efecti hakee palvelimelta listan viesteistä jotka saadaan tulostettua tilanmuutoksen messages -muuttujalla.\r\n  useEffect(() => {\r\n    messageService.getAllMessages().then((response) => {\r\n      setMessages(response);\r\n    });\r\n\r\n    socket.on(\"message\", async (messageObject) => {\r\n      const result = await messageService.getAllMessages();\r\n      setMessages(result);\r\n    });\r\n  }, []);\r\n\r\n  //Tallennetaan käyttäjän autentikointitoken\r\n  useEffect(() => {\r\n    const loggedChatBoxUserJSON = window.localStorage.getItem(\r\n      \"loggedChatBoxUser\"\r\n    );\r\n\r\n    if (loggedChatBoxUserJSON) {\r\n      const user = JSON.parse(loggedChatBoxUserJSON);\r\n      setUser(user);\r\n      messageService.setToken(user.token);\r\n    }\r\n  }, []);\r\n  //Luo uuden viestin mongo tietokantaan\r\n  //Hakee päivämäärän mukaan järjestellyn listan\r\n  //Tyhjää viestin syötekentän\r\n  const addMessage = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const messageObject = {\r\n      content: newMessage,\r\n      id: messages.length + 1,\r\n      date: new Date(Date.now()).toString(),\r\n      username: user.username,\r\n    };\r\n\r\n    await messageService.createMessage(messageObject);\r\n    const response = await messageService.getAllMessages();\r\n    setMessages(response);\r\n    setNewMessage(\"\");\r\n\r\n    socket.emit(\"chatMessage\", messageObject);\r\n  };\r\n\r\n  //käytetään funktiota syöte -kentän synkronointiin\r\n  const handleMessageChange = (event) => {\r\n    setNewMessage(event.target.value);\r\n  };\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const user = await loginService.login({ username, password });\r\n      //Tallentaa käyttäjän tunnistetiedot selaimen muistiin\r\n      window.localStorage.setItem(\"loggedChatBoxUser\", JSON.stringify(user));\r\n      messageService.setToken(user.token);\r\n      setUser(user);\r\n      setUsername(\"\");\r\n      setPassword(\"\");\r\n    } catch (exception) {\r\n      setErrorMessage(\"Wrong credentials\");\r\n    }\r\n  };\r\n\r\n  const loginForm = () => {\r\n    return (\r\n      <form onSubmit={handleLogin}>\r\n        <p>Login to participate in the chat!</p>\r\n        <p>\r\n          <strong>Tip! </strong>Username: demo & password: salasana\r\n        </p>\r\n        <div>\r\n          username:\r\n          <input\r\n            value={username}\r\n            name=\"Username\"\r\n            onChange={({ target }) => setUsername(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          password:\r\n          <input\r\n            value={password}\r\n            name=\"Password\"\r\n            type=\"password\"\r\n            onChange={({ target }) => setPassword(target.value)}\r\n          ></input>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">login</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  };\r\n  //Viestin lähetykseen tarvittavat näkymät aktivoituvat, kun kirjaudutaan\r\n  const submitForm = () => {\r\n    return (\r\n      <form onSubmit={addMessage}>\r\n        <input value={newMessage} onChange={handleMessageChange} />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div class=\"grid-container\">\r\n      <div class=\"grid-item\">\r\n        <h1> Chatbox {user !== null && submitForm()}</h1>\r\n      </div>\r\n\r\n      {user === null && loginForm()}\r\n      <div class=\"grid-item\">\r\n        <ul>\r\n          {messages.map((message) => (\r\n            <Message key={message.id} message={message} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n  \r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}