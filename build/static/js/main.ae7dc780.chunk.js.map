{"version":3,"sources":["components/Message.js","services/messages.js","services/login.js","App.js","index.js"],"names":["Message","message","style","color","fontStyle","fontSize","listStyleType","margin","padding","backgroundColor","boxShadow","textAlign","username","date","slice","content","token","getAllMessages","axios","get","then","response","data","createMessage","newObject","a","config","headers","Authorization","post","setToken","newToken","login","credentials","console","log","App","useState","errorMessage","setErrorMessage","messages","setMessages","newMessage","setNewMessage","setUsername","password","setPassword","user","setUser","useEffect","messageService","loggedChatBoxUserJSON","window","localStorage","getItem","JSON","parse","addMessage","event","preventDefault","messageObject","id","length","handleMessageChange","target","value","handleLogin","loginService","setItem","stringify","class","onSubmit","onChange","type","name","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae7dc780.chunk.js","sourcesContent":["import React from 'react'\n\nconst Message = ({ message }) => {\n    const messageStyle = {\n        color: '#543257',\n        fontStyle: 'italic',\n        fontSize: 16,\n        listStyleType: 'none',\n        margin: 10,\n        padding: 10,\n        backgroundColor: '#aabb97',\n        boxShadow: \"0 4px 4px\",\n        textAlign: 'left'\n      }\n    const textStyle = {\n        color: '#e8f1f7'\n    }\n    \n    const parseTime = (time) => {\n        \n        return time.slice(11,16)\n    }\n\n    return (\n    <div style={messageStyle}>\n        <li>{message.username} {parseTime(message.date)}\n        \n        <p style={textStyle}>{message.content}</p></li>\n    </div>\n    \n    )\n}\n\nexport default Message","//Tämä moduuli lähettää REST kyselyt palvelimelle.\nimport axios from 'axios'\nconst baseUrl = '/api/messages'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n}\n\nconst getAllMessages = () => {\n    const request = axios.get(baseUrl)\n    \n    return request.then(response => {\n        return response.data\n    })\n}\n\nconst createMessage = async newObject => {\n    const config = {\n        headers: { Authorization: token },\n    }\n\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n}\n\nexport default {\n    getAllMessages,\n    createMessage,\n    setToken\n}","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n    console.log(\"credentials: \",credentials)\n    const response = await axios.post(baseUrl, credentials)\n    return response.data\n}\n\nexport default {login}","import React, { useState, useEffect }  from 'react'\nimport Message from './components/Message'\nimport messageService from './services/messages'\nimport loginService from './services/login'\n\n\n\n\nconst App = () => {\n    const [errorMessage, setErrorMessage] = useState(null)\n    const [messages,     setMessages]     = useState([])\n    const [newMessage,   setNewMessage]   = useState('')\n    const [username,     setUsername]     = useState('')\n    const [password,     setPassword]     = useState('')\n    const [user,         setUser]         = useState(null)\n\n\n    //Efecti hakee palvelimelta listan viesteistä jotka saadaan tulostettua tilanmuutoksen messages -muuttujalla.\n    useEffect(() => {\n       messageService\n        .getAllMessages()\n        .then(response => {\n            console.log('Message', response)\n            setMessages(response)\n        })\n   }, [])\n\n   //Tallennetaan käyttäjän autentikointitoken\n   useEffect(() => {\n       const loggedChatBoxUserJSON = window.localStorage.getItem('loggedChatBoxUser')\n\n       if (loggedChatBoxUserJSON) {\n           const user = JSON.parse(loggedChatBoxUserJSON)\n           setUser(user)\n           messageService.setToken(user.token)\n       }\n   },[] )\n    //Luo uuden viestin mongo tietokantaan\n    //Hakee päivämäärän mukaan järjestellyn listan\n    //Tyhjää viestin syötekentän\n    const addMessage = (event) => {\n        event.preventDefault()\n\n        const messageObject = {\n            content: newMessage,\n            id: messages.length +1\n        }\n\n        messageService\n            .createMessage(messageObject)\n            .then(response => {\n                messageService.getAllMessages()\n                    .then(response => {\n                    console.log('Message', response)\n                    setMessages(response)\n                    setNewMessage('')\n                })\n            })\n    }\n\n    //käytetään funktiota syöte -kentän synkronointiin\n    const handleMessageChange = (event) => {\n        setNewMessage(event.target.value)\n    }\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n\n        try {\n            const user = await loginService.login({username, password})\n            //Tallentaa käyttäjän tunnistetiedot selaimen muistiin\n            window.localStorage.setItem(\n                'loggedChatBoxUser',\n                JSON.stringify(user))\n            messageService.setToken(user.token)\n            setUser(user)\n            setUsername('')\n            setPassword('')\n            console.log('Login ok!')\n        } catch (exception) {\n            setErrorMessage('Wrong credentials')\n            console.log(errorMessage)\n        }\n    }\n\n    \n    const loginForm = () => {\n        return(\n            <form onSubmit={handleLogin}>\n                <p>Login to participate in the chat!</p>\n                <p><strong>Tip! </strong>Username: demo & password: salasana</p>\n                <div>\n                    username: \n                        <input\n                            value={username}\n                            name=\"Username\"\n                            onChange={({target}) => setUsername(target.value)} />\n                </div>\n                <div> \n                    password:\n                        <input\n                            value={password}\n                            name=\"Password\"\n                            type=\"password\"\n                            onChange={({target}) => setPassword(target.value)}>\n                        </input>\n                </div>\n                <div>\n                    <button type=\"submit\">login</button>\n                </div>\n            </form>\n        )\n    }\n    //Viestin lähetykseen tarvittavat näkymät aktivoituvat, kun kirjaudutaan\n    const submitForm = () => {\n        return(\n        <form onSubmit={addMessage}>\n                <input \n                    value={newMessage}\n                    onChange={handleMessageChange}\n                />\n                <button type=\"submit\">Send</button>\n        </form>)\n    }\n\n    return (\n        <div class=\"grid-container\">\n            <div class=\"grid-item\">\n            <h1> Chatbox  {user !== null && submitForm()}</h1> \n            </div>\n            \n            {user=== null && loginForm()}\n            <div class=\"grid-item\">\n            <ul>\n                {messages.map(message => <Message key={message.id} message={message} />)}\n            </ul>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n  \n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}